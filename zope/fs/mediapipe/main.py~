import os
import cv2
import mediapipe as mp
import sys
import time

start = time.time()

mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_pose = mp.solutions.pose

# For static images:
IMAGE_FILES = [item for item in os.listdir() if item.endswith('.jpg')]
BG_COLOR = (192, 192, 192) # gray

# sport by number
IMAGE_FILES.sort(key=lambda x: int(x.split('.')[0]))

# IMAGE_FILES = IMAGE_FILES[:3]
# print(IMAGE_FILES)

keys = [item for item in dir(mp_pose.PoseLandmark) if not item.startswith('__')]

print(keys)

sys.exit(0)

dump_result = []

with mp_pose.Pose(
        static_image_mode=False,
        model_complexity=2,
        enable_segmentation=False,
        min_detection_confidence=0.1,
        min_tracking_confidence=0.1,
) as pose:
    for idx, file in enumerate(IMAGE_FILES):
        image = cv2.imread(file)
        image_height, image_width, _ = image.shape
        # Convert the BGR image to RGB before processing.
        results = pose.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

        if not results.pose_world_landmarks:
            print('No landmarks!')
            continue
        print(
            f'Nose coordinates: ('
            f'{results.pose_world_landmarks.landmark[mp_pose.PoseLandmark.NOSE].x}, '
            f'{results.pose_world_landmarks.landmark[mp_pose.PoseLandmark.NOSE].y},'
            f'{results.pose_world_landmarks.landmark[mp_pose.PoseLandmark.NOSE].z})'
        )

        print(dir(results.pose_world_landmarks))
        print(results.pose_world_landmarks.ListFields())
        #for item in results.pose_world_landmarks:
        #    print(item)
        dump_result.append(results.pose_landmarks)

end = time.time() - start
print(f'Took {end}s')
#print(dump_result)
